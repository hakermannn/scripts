local fakecharacter = Instance.new("Model",script)
local ball = Instance.new("Part",fakecharacter)
ball:SetNetworkOwner(owner)
ball.Shape = "Ball"
ball.Size = Vector3.new(1.5,1.5,1.5)
ball.Transparency = 1
local object3 = Instance.new("ObjectValue", owner.PlayerGui)
object3.Value = ball
object3.Name = "part"
local object2 = Instance.new("ObjectValue", owner.PlayerGui)
object2.Value = fakecharacter
object2.Name = "ok"
owner.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
character = script
local function createHand(handType,what,arm)
	local hand = Instance.new("Part")
	hand.Parent = character
	hand.CFrame = owner.Character.HumanoidRootPart.CFrame
	hand.Size = Vector3.new(0.7, 0.7, 1.5)
	hand.Transparency = 0
	hand.Material = Enum.Material.SmoothPlastic
local bv = Instance.new("BodyVelocity",hand)
bv.Velocity = Vector3.new()
bv.MaxForce = Vector3.new(1,1,1) * math.huge
local bg = Instance.new("BodyGyro",hand)
bg.D = 1250
bg.MaxTorque = Vector3.new(40000000, 40000000, 40000000)
bg.P = 100000
	hand.Name = handType
hand:SetNetworkOwner(owner)
local App = game:GetService("Players"):GetCharacterAppearanceAsync(owner.UserId)
local col
if arm == "left" then
col = App["Body Colors"].LeftArmColor
else
col = App["Body Colors"].RightArmColor
end
hand.BrickColor = col
	return hand
end
local App = game:GetService("Players"):GetCharacterAppearanceAsync(owner.UserId)
local col = App["Body Colors"].HeadColor
	local hed = owner.Character.Head:Clone()
	hed.Parent = character
	local bg = Instance.new("BodyGyro",hed)
bg.D = 1250
bg.MaxTorque = Vector3.new(40000000, 40000000, 40000000)
bg.P = 100000
hed.Size = Vector3.new(0.85,0.85,0.85)
for i,v in pairs(owner.Character.Humanoid:GetAccessories()) do
if v.AccessoryType == Enum.AccessoryType.Hair or v.AccessoryType == Enum.AccessoryType.Hat or v.AccessoryType == Enum.AccessoryType.Face then
local s = v.Handle:Clone()
s.Parent = hed
if s:FindFirstChildWhichIsA("SpecialMesh") then
s:FindFirstChildWhichIsA("SpecialMesh").Scale -= Vector3.new(0.15,0.15,0.15)
end
end
end
for i,v in pairs(hed:GetDescendants()) do
if v:IsA("Part") then
local weld = Instance.new("Weld",hed)
weld.Part0 = v
weld.Part1 = hed
weld.C0 = CFrame.new((v.CFrame:Inverse() * owner.Character.Head.CFrame).Position * 1.15)
v:SetNetworkOwner(owner)
end
end
	hed.CFrame = owner.Character.HumanoidRootPart.CFrame
	hed.Transparency = 0
	hed.Material = Enum.Material.SmoothPlastic
	hed.CanCollide = false
local bv = Instance.new("BodyVelocity",hed)
bv.Velocity = Vector3.new()
bv.MaxForce = Vector3.new(1,1,1) * math.huge
hed:SetNetworkOwner(owner)
local leftHand = createHand("rightHand",owner.Character["Right Arm"])
local rightHand = createHand("leftHand",owner.Character["Left Arm"])
local object = Instance.new("ObjectValue", owner.PlayerGui)
object.Value = leftHand
object.Name = "hand"
local object2 = Instance.new("ObjectValue", owner.PlayerGui)
object2.Value = rightHand
object2.Name = "hand2"
local object3 = Instance.new("ObjectValue", owner.PlayerGui)
object3.Value = hed
object3.Name = "hedl"
e = Instance.new("RemoteEvent",hed)
e2 = Instance.new("RemoteEvent",leftHand)
local LastPartBeingHeldLeft = nil
local LastPartBeingHeldRight = nil
e.OnServerEvent:Connect(function(_,Data)
		if Data.InputData.PartBeingGrabbedLeft then
			if Data.InputData.PartBeingGrabbedLeft ~= LastPartBeingHeldLeft then
				LastPartBeingHeldLeft = Data.InputData.PartBeingGrabbedLeft
  local wel = Instance.new("WeldConstraint",LastPartBeingHeldLeft)
  wel.Part0 = leftHand
  wel.Part1 = wel.Parent
wel.Name = "Grab2"
			end
		else
			if LastPartBeingHeldLeft then
				if LastPartBeingHeldLeft:FindFirstChild("Grab2") then
					LastPartBeingHeldLeft:FindFirstChild("Grab2"):Destroy()
					end
			end
			LastPartBeingHeldLeft = nil
		end
		if Data.InputData.PartBeingGrabbedRight then
			if Data.InputData.PartBeingGrabbedRight ~= LastPartBeingHeldRight then
				LastPartBeingHeldRight = Data.InputData.PartBeingGrabbedRight
  local wel = Instance.new("WeldConstraint",LastPartBeingHeldRight)
  wel.Part0 = rightHand
  wel.Part1 = wel.Parent
wel.Name = "Grab"
			end
		else
			if LastPartBeingHeldRight then
				if LastPartBeingHeldRight:FindFirstChild("Grab") then
					LastPartBeingHeldRight:FindFirstChild("Grab"):Destroy()
				end
			end
			LastPartBeingHeldRight = nil
		end
	end)

e2.OnServerEvent:Connect(function(_,part,cf)
part.CFrame = cf
part:FindFirstChildWhichIsA("BodyGyro").CFrame = cf
end)
wait()
for i,v in pairs(owner.Character:GetDescendants()) do
pcall(function()
if v ~= owner.Character.Humanoid then
if v ~= owner.Character then
v.Parent = nil
end
end
end)
end
       local screengui2 = Instance.new("SurfaceGui", owner.PlayerGui)
        screengui2.Name = "Hud"
screengui2.Adornee = leftHand
screengui2.Face = Enum.NormalId.Right
        screengui2.AlwaysOnTop = true
local scrollingFrame = Instance.new("ScrollingFrame",screengui2)
scrollingFrame.BackgroundTransparency = 0.35
scrollingFrame.BackgroundColor3 = Color3.fromRGB(85,85,85)
scrollingFrame.BorderColor3 = Color3.fromRGB(3, 252, 236)
scrollingFrame.BorderSizePixel = 5
scrollingFrame.Size = UDim2.new(1.125, 0, 1.125, 0)
scrollingFrame.CanvasSize = UDim2.new(1, 0, 20, 0)
scrollingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
scrollingFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
scrollingFrame.BottomImage = "rbxassetid://5130457560"
scrollingFrame.MidImage = "rbxassetid://5130456020"
scrollingFrame.ScrollBarThickness = 8
scrollingFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.None
scrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y
scrollingFrame.TopImage = "rbxassetid://5130456922"
scrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
scrollingFrame.ScrollingEnabled = true
local lastpos = UDim2.new(0,0,0.0625,0)
game:GetService("Players").PlayerAdded:Connect(function(player)
player.Chatted:Connect(function(msg)
if msg:sub(1,2) ~= "/e" then
        local tl = Instance.new("TextBox", scrollingFrame)
tl.Text = tostring(player.Name)..": "..game:GetService("Chat"):FilterStringForBroadcast(msg, owner)
        tl.Size = UDim2.new(1, 0, 0.0625, 0)
        tl.Position = lastpos + UDim2.new(0,0,0.065,0)
	tl.TextWrapped = true
tl.TextColor3 = Color3.fromRGB(3, 252, 236)
tl.TextSize = 35
tl.TextXAlignment = "Left"
tl.BackgroundTransparency = 1
tl.TextYAlignment = "Top"
local _, count = msg:gsub("\n", "")
lastpos = tl.Position + UDim2.new(0,0,(count * 0.065),0)
end
end)
end)
bodyparts2 = {}
bodyparts = {}
function protectlimb(part,props,index)
    if not part then return end
coroutine.wrap(function()
    local index,props = index or #bodyparts+1,props or {Parent = part.Parent}
    bodyparts[index] = part
    part.Parent = props.Parent
    part.AncestryChanged:Connect(function(part,newparent)
pcall(function()
coroutine.wrap(function()
if newparent ~= nil and newparent ~= props.Parent then
part.Parent = props.Parent
else
coroutine.wrap(function()
owner.Character.HumanoidRootPart.Anchored = true
wait(0.125)
owner.Character.HumanoidRootPart.Anchored = false
end)()
local newm = part:Clone()
newm.Name = part.Name
newm.Parent = part.Parent
newm.Part0 = part.Part0
newm.Part1 = part.Part1
protectlimb(newm,props,index)
end
end)()
end)
end)
end)()
end
function protectlimb2(part2,props2,index2)
    if not part2 then return end
coroutine.wrap(function()
    local index2,props2 = index2 or #bodyparts2+1,props2 or {Parent = part2.Parent}
    bodyparts2[index2] = part2
    part2.Parent = props2.Parent
    part2.AncestryChanged:Connect(function(part2,newparent)
pcall(function()
coroutine.wrap(function()
if newparent ~= nil and newparent ~= props2.Parent then
part2.Parent = props2.Parent
else
coroutine.wrap(function()
owner.Character.HumanoidRootPart.Anchored = true
wait(0.125)
owner.Character.HumanoidRootPart.Anchored = false
end)()
local newm = part2:Clone()
newm.Name = part2.Name
newm.Parent = part2.Parent
newm.Part0 = part2.Part0
newm.Part1 = part2.Part1
protectlimb2(newm,props2,index2)
end
end)()
end)
end)
end)()
end
for i,v in pairs(script:GetDescendants()) do
if v:IsA("Weld") then
protectlimb(v)
end
end
for i,v in pairs(game:GetService("Players"):GetPlayers()) do
v.Chatted:Connect(function(msg)
if msg:sub(1,2) ~= "/e" then
        local tl = Instance.new("TextBox", scrollingFrame)
tl.Text = tostring(v.Name)..": "..game:GetService("Chat"):FilterStringForBroadcast(msg, owner)
        tl.Size = UDim2.new(1, 0, 0.0625, 0)
        tl.Position = lastpos + UDim2.new(0,0,0.065,0)
	tl.TextWrapped = true
tl.TextColor3 = Color3.fromRGB(3, 252, 236)
tl.TextSize = 35
tl.TextEditable = false
tl.TextXAlignment = "Left"
tl.BackgroundTransparency = 1
tl.TextYAlignment = "Top"
local _, count = msg:gsub("\n", "")
lastpos = tl.Position + UDim2.new(0,0,(count * 0.065),0)
end
end)
end
NLS([[
local leftHand = owner.PlayerGui.hand.Value
local rightHand = owner.PlayerGui.hand2.Value
local hed = owner.PlayerGui.hedl.Value
local part = owner.PlayerGui.part.Value
local des = owner.PlayerGui.ok.Value
e = hed:FindFirstChildWhichIsA("RemoteEvent")
e2 = leftHand:FindFirstChildWhichIsA("RemoteEvent")
local inputService = game:GetService("UserInputService")
camera = workspace.CurrentCamera
camera.CameraType = "Scriptable"
local vrService = game:GetService("VRService")
hed.Transparency = 1
for i,v in pairs(hed:GetDescendants()) do
if v:IsA("Part") then
v.Transparency = 1
end
end
workspace.CurrentCamera.HeadScale = 1.5
vrService.UserCFrameChanged:Connect(function(partt, move)
	if partt == Enum.UserCFrame.LeftHand then
		e2:FireServer(leftHand,camera.CFrame * CFrame.new((move.Position + part.Velocity * owner:GetNetworkPing()) * 1.5) * CFrame.Angles(move:ToEulerAnglesXYZ()))
	elseif partt == Enum.UserCFrame.RightHand then
		e2:FireServer(rightHand,camera.CFrame * CFrame.new((move.Position + part.Velocity * owner:GetNetworkPing())* 1.5) * CFrame.Angles(move:ToEulerAnglesXYZ()))
	elseif partt == Enum.UserCFrame.Head then
		e2:FireServer(hed,camera.CFrame * CFrame.new((move + part.Velocity * owner:GetNetworkPing())) * CFrame.Angles(move:ToEulerAnglesXYZ()))
	end
end)
local GrabbingL = nil
local GrabbingR = nil
 rayblacklist = {hed,leftHand,rightHand}
local Gamepad = Enum.UserInputType.Gamepad1
game:GetService("RunService").Stepped:Connect(function()
		if inputService:IsGamepadButtonDown(Gamepad, Enum.KeyCode.ButtonL1) then
			local GrabRayL = workspace:Raycast(leftHand.Position, leftHand.CFrame.lookVector * 250)
			if GrabRayL then
				if (GrabRayL.Position - leftHand.Position).Magnitude <= 2.5 and not GrabbingL and GrabRayL.Instance.Anchored == false then
					GrabbingL = GrabRayL.Instance
				end
			else
				GrabbingL = nil
			end
		else
			GrabbingL = nil
		end
 
		if inputService:IsGamepadButtonDown(Gamepad, Enum.KeyCode.ButtonR1) then
			local GrabRayR = workspace:Raycast(rightHand.Position, rightHand.CFrame.lookVector * 250)
			if GrabRayR then
				if (GrabRayR.Position - rightHand.Position).Magnitude <= 2.5 and not GrabbingR and GrabRayR.Instance.Anchored == false then
					GrabbingR = GrabRayR.Instance
				end
			else
				GrabbingR = nil
			end
		else
			GrabbingR = nil
		end
			Data = {
		InputData = {
				["PartBeingGrabbedLeft"] = GrabbingL;
				["PartBeingGrabbedRight"] = GrabbingR;
			}
			}
			e:FireServer(Data)

end)
local StarterGui = game:GetService("StarterGui")
StarterGui:SetCore("VRLaserPointerMode", 0)
StarterGui:SetCore("VREnableControllerModels", false)
CurrentCamera = workspace.CurrentCamera
local VRSpeed = 16
UserInputService = game:GetService("UserInputService")
local ball = Instance.new("BodyVelocity",part)
ball.MaxForce = Vector3.new(50000,0,50000)
ball.Velocity = Vector3.new()
local rot = 0
local rot2 = 0
UserInputService.InputChanged:Connect(function(input, processed)
		if input.KeyCode == Enum.KeyCode.Thumbstick1 then
		ball.Velocity = ((CurrentCamera:GetRenderCFrame().RightVector * (input.Position.X * (VRSpeed))) + (CurrentCamera:GetRenderCFrame().LookVector * (input.Position.Y * (VRSpeed/0.75))))
end
		if input.KeyCode == Enum.KeyCode.Thumbstick2 then
rot2 = input.Position.X
end
end)
UserInputService.InputEnded:Connect(function(input)
if input.KeyCode == Enum.KeyCode.Thumbstick1 then
ball.Velocity = Vector3.new(0,0,0)
end
if input.KeyCode == Enum.KeyCode.Thumbstick2 then
rot2 = 0
end
end)
local max = 5
local rad = 3.5
local stiff = 100
local damp = 5
length = 0.5
game:GetService("RunService").RenderStepped:Connect(function(dt)
CurrentCamera.CFrame = CFrame.new(part.Position + Vector3.new(0,1.5,0)) * CFrame.Angles(0,math.rad(rot),0)
rot = rot + (-rot2 * 3)
local params = RaycastParams.new()
params.FilterDescendantsInstances = {part,des:GetDescendants()}
params.FilterType = Enum.RaycastFilterType.Blacklist
	local result = workspace:Raycast(par.CFrame:ToWorldSpace(CFrame.new(par.Position)).Position,-par.CFrame.UpVector * (max + rad), params)
if result then
	local dist = (part.CFrame:ToWorldSpace(CFrame.new(par.Position)).Position - result.Position).Magnitude
	local lengthh = math.clamp(dist - rad,0,max)
	local mult = 3.5
	part:ApplyImpulseAtPosition(Vector3.new(0,1,0) * ((stiff * (max - lengthh)) + (damp * ((length - lengthh) / dt))), result.Position)
		length = math.clamp(dist - rad,0,max)
	else
		length = math.clamp(length +dt,0,max)
	end
end)
]],owner.PlayerGui)
