NLS([[
local phantom = Instance.new("Model",workspace)

local ball = Instance.new("Part",phantom)
ball.Shape = "Ball"
ball.Size = Vector3.new(1.5,1.5,1.5)
ball.Color = Color3.fromRGB(20,20,20)
ball.Transparency = 0.5

local fender = Instance.new("Part",phantom)
fender.Shape = "Ball"
fender.Size = Vector3.new(1.55,1.55,1.55)

local physProperties = PhysicalProperties.new(0.7, 0, 0.3, 15, 15)
fender.CustomPhysicalProperties = physProperties
local physProperties = PhysicalProperties.new(0.7, 2, 0.3, 15, 15)
ball.CustomPhysicalProperties = physProperties

local origin = Instance.new("Part",phantom)
origin.CanCollide = false
origin.Size = Vector3.new(0.1,0.1,0.1)

local locomotion = Instance.new("Part",phantom)
locomotion.CanCollide = false
locomotion.Size = Vector3.new(0.1,0.1,0.1)

local locoweld = Instance.new("Weld",origin)
locoweld.Part1 = origin
locoweld.Part0 = locomotion

local fenderbender = Instance.new("Weld",origin)
fenderbender.Part1 = origin
fenderbender.Part0 = fender
fenderbender.C1 = CFrame.new(0,-1.15,0)

local MoveJoint = Instance.new("Attachment",ball)

local FenderJoint = Instance.new("Attachment",fender)
FenderJoint.CFrame = CFrame.new(0,-0.4,0)

local OriginStabilizer = Instance.new("Attachment",origin)

local Stabilizer = Instance.new("AlignOrientation",origin)
Stabilizer.Attachment0 = OriginStabilizer
Stabilizer.Mode = "OneAttachment"
Stabilizer.RigidityEnabled = true

local Socket = Instance.new("BallSocketConstraint",FenderJoint)
Socket.Attachment0 = MoveJoint
Socket.Attachment1 = FenderJoint

phantom.PrimaryPart = origin

ball.Position = Vector3.new(0,5,0)
fender.Position = Vector3.new(0,5,0)
locomotion.Position = Vector3.new(0,5,0)
origin.Position = Vector3.new(0,5,0)

CurrentCamera = workspace.CurrentCamera
local VRSpeed = 16
local offset = Vector3.new(0,0,0)
local offsetUpdate = Vector3.new(0,0,0)

UserInputService = game:GetService("UserInputService")
function pid(force,want,current)
e = want - current
return force * e
end

function clampVector(v, max)
if (v.magnitude == 0) then return Vector3.new(0,0,0) end
return v.Unit * math.min(v.Magnitude, max)
end

local movement = false
local MoveDir = Vector3.new(0,0,0)
local input = Vector2.new(0,0)

	UserInputService.InputChanged:Connect(function(inp, processed)
		if inp.KeyCode == Enum.KeyCode.Thumbstick1 then
		input = inp
		movement = true
		end
	end)
	UserInputService.InputEnded:Connect(function(inp)
		if inp.KeyCode == Enum.KeyCode.Thumbstick1 then
		input = inp
		movement = false
		end
	end)
	--VRService.UserCFrameChanged:Connect(function(input,val)
	--	if inputType == Enum.UserCFrame.Head then
	--	end
	--end)
game:GetService("RunService").RenderStepped:Connect(function()
	offset = (game:GetService("VRService"):GetUserCFrame(Enum.UserCFrame.Head).Position - Vector3.new(0,game:GetService("VRService"):GetUserCFrame(Enum.UserCFrame.Head).Position.Y,0)) * CurrentCamera.HeadScale
	locoweld.C1 = CFrame.new(offset)
	CurrentCamera.CFrame = CFrame.new(locomotion.Position + Vector3.new(0,4.25,0))
	local angle = CFrame.fromAxisAngle(Vector3.new(0,1,0), 90):VectorToWorldSpace(offsetUpdate - offset)
	offsetUpdate = offsetUpdate + pid(1,offset,offsetUpdate)
	local bm = 0
	local am = 0
		if movement then
			local ang = pid(1,(CurrentCamera:GetRenderCFrame().LookVector * (input.Position.X * VRSpeed)) + (CurrentCamera:GetRenderCFrame().RightVector * -(input.Position.Y * VRSpeed)),ball.AssemblyAngularVelocity)
			MoveDir = ang
		else
			local ang = pid(1,Vector3.new(0,0,0),ball.AssemblyAngularVelocity)
			MoveDir = ang
		end
	if (ball.AssemblyAngularVelocity + MoveDir) ~= Vector3.new(0,0,0) then
	bm = (ball.AssemblyAngularVelocity + MoveDir).magnitude
	end
	if angle ~= Vector3.new(0,0,0) then
	am = angle.magnitude
	end
	if am > bm then
		ball.AssemblyAngularVelocity = ball.AssemblyAngularVelocity + angle
	else
		ball.AssemblyAngularVelocity = ball.AssemblyAngularVelocity + MoveDir
	end
end)
]],owner.PlayerGui)
