owner.Chatted:Connect(function(msg)
if msg == "-dummy" then
coroutine.wrap(function()
local char = Instance.new("Model" , script)
char.Name = "thing"
local rootp = Instance.new("Part",char)
rootp.CanCollide = false
rootp.Anchored = true
rootp.Size = Vector3.new(2,2,1)
rootp.Transparency = 1
rootp.CFrame = owner.Character.Head.CFrame * CFrame.new(0,-2,-6)
rootp.Massless = true
char.PrimaryPart = rootp
local part = Instance.new("Part",char)
part.CFrame = owner.Character.Head.CFrame * CFrame.new(0,0.5,0)
part.Size = Vector3.new(1.85,1.25,1)
local part2 = Instance.new("Part",char)
part2.CFrame = owner.Character.Head.CFrame * CFrame.new(0,1.75,0)
part2.Size = Vector3.new(1.25,1.25,1.25)
local s = Instance.new("SpecialMesh",part2)
s.MeshType = "Head"
local part3 = Instance.new("Part",char)
part3.CFrame = owner.Character.Head.CFrame * CFrame.new(0,-0.5,0)
part3.Size = Vector3.new(1.5,1.25,0.75)
part3.Name = "Torso"
local s = Instance.new("SpecialMesh",part3)
s.MeshType = "Brick"
s.Scale = Vector3.new(1.125,1.125,1.125)
local part4 = Instance.new("Part",char)
part4.CFrame = owner.Character.Head.CFrame * CFrame.new(0.4,-1.5,0)
part4.Size = Vector3.new(0.81,1.25,0.81)
part4.CanCollide = false
local s = Instance.new("SpecialMesh",part4)
s.MeshType = "Head"
s.Scale = Vector3.new(0.75,1,0.75)
local part5 = Instance.new("Part",char)
part5.CFrame = owner.Character.Head.CFrame * CFrame.new(-0.4,-1.5,0)
part5.Size = Vector3.new(0.81,1.25,0.81)
part5.CanCollide = false
local s = Instance.new("SpecialMesh",part5)
s.MeshType = "Head"
s.Scale = Vector3.new(0.75,1,0.75)
local part6 = Instance.new("Part",char)
part6.CFrame = owner.Character.Head.CFrame * CFrame.new(-0.4,-1.25 * 2,0)
part6.Size = Vector3.new(0.8,1.5,0.8)
part6.CanCollide = false
local s = Instance.new("SpecialMesh",part6)
s.MeshType = "Head"
s.Scale = Vector3.new(0.75,1,0.75)
local part7 = Instance.new("Part",char)
part7.CFrame = owner.Character.Head.CFrame * CFrame.new(0.4,-1.25 * 2,0)
part7.Size = Vector3.new(0.8,1.5,0.8)
part7.CanCollide = false
local s = Instance.new("SpecialMesh",part7)
s.MeshType = "Head"
s.Scale = Vector3.new(0.75,1,0.75)
local hum = Instance.new("Humanoid")
hum.Parent = char
hum.Name = "Humanoid"
hum.RequiresNeck = false
hum.DisplayName = "thing"
hum.MaxHealth = 300
hum.Health = 300
hum.BreakJointsOnDeath = false
hum.AutoJumpEnabled = true
hum.HipHeight = 2.75
local rootweld = Instance.new("Weld",rootp)
rootweld.Part0 = part3
rootweld.Part1 = rootp
rootweld.C1 = CFrame.new(0,-0.25,-0.01)
rootweld.Name = "Root Joint"
local weld = Instance.new("Weld",part3)
weld.Part0 = part
weld.Part1 = part3
weld.C1 = CFrame.new(0,0.65,-0.0125)
weld.C0 = CFrame.new(0,-0.65,0)
local weld2 = Instance.new("Weld",part)
weld2.Part0 = part2
weld2.Part1 = part
weld2.C1 = CFrame.new(0,0.65,0)
weld2.C0 = CFrame.new(0,-0.65,0)
local lleg1 = Instance.new("Weld",part3)
lleg1.Part0 = part4
lleg1.Part1 = part3
lleg1.C1 = CFrame.new(-0.45,-0.65,0)
lleg1.C0 = CFrame.new(0,0.65,0)
local rleg1 = Instance.new("Weld",part3)
rleg1.Part0 = part5
rleg1.Part1 = part3
rleg1.C1 = CFrame.new(0.45,-0.65,0)
rleg1.C0 = CFrame.new(0,0.65,0)
local lleg2 = Instance.new("Weld",part4)
lleg2.Part0 = part7
lleg2.Part1 = part4
lleg2.C1 = CFrame.new(0,-0.65,0)
lleg2.C0 = CFrame.new(0,0.65,0)
local rleg2 = Instance.new("Weld",part5)
rleg2.Part0 = part6
rleg2.Part1 = part5
rleg2.C1 = CFrame.new(0,-0.65,0)
rleg2.C0 = CFrame.new(0,0.65,0)
local tweenService = game:GetService("TweenService")
local tweenInfo = TweenInfo.new(1.5,Enum.EasingStyle.Sine,Enum.EasingDirection.Out)
local goal = {}
goal.C0 = CFrame.new(0,-0.625,0) * CFrame.Angles(math.rad(3),0,0)
local tween = tweenService:Create(weld, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,-0.625,0) * CFrame.Angles(math.rad(2.75),0,0)
local tween2 = tweenService:Create(weld2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,-0.65,0) * CFrame.Angles(math.rad(2),0,0)
local tween3 = tweenService:Create(weld, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,-0.625,0) * CFrame.Angles(math.rad(2.25),0,0)
local tween4 = tweenService:Create(weld2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.65,0) * CFrame.Angles(math.rad(-11),math.rad(-11),0)
local tween5 = tweenService:Create(lleg1, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(-10),math.rad(-9),0)
local tween6 = tweenService:Create(lleg1, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.65,0) * CFrame.Angles(math.rad(21),0,0)
local tween7 = tweenService:Create(lleg2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(20),0,0)
local tween8 = tweenService:Create(lleg2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.65,0) * CFrame.Angles(math.rad(-11),math.rad(12),0)
local tween9 = tweenService:Create(rleg1, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(-10),math.rad(10),0)
local tween10 = tweenService:Create(rleg1, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.65,0) * CFrame.Angles(math.rad(21),0,0)
local tween11 = tweenService:Create(rleg2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(20),0,0)
local tween12 = tweenService:Create(rleg2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.025,0) * CFrame.Angles(math.rad(1),0,0)
local rtween = tweenService:Create(rootweld, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new()
local rtween2 = tweenService:Create(rootweld, tweenInfo, goal)
local tweenInfo = TweenInfo.new(0.2,Enum.EasingStyle.Quad,Enum.EasingDirection.Out)
local goal = {}
goal.C0 = CFrame.new(0,0.1,0) * CFrame.Angles(0,math.rad(5),0)
local rtweenr = tweenService:Create(rootweld, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0,0)
local rtween2r = tweenService:Create(rootweld, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,0.1,0) * CFrame.Angles(0,math.rad(-5),0)
local rtween3r = tweenService:Create(rootweld, tweenInfo, goal)

local goal = {}
goal.C0 = CFrame.new(0,-0.6,0) * CFrame.Angles(math.rad(5),0,0)
local rtweenr2 = tweenService:Create(weld2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,-0.65,0) * CFrame.Angles(math.rad(2.5),0,0)
local rtween2r2 = tweenService:Create(weld2, tweenInfo, goal)
local goal = {}
goal.C0 = CFrame.new(0,-0.6,0) * CFrame.Angles(math.rad(5),0,0)
local rtween3r2 = tweenService:Create(weld2, tweenInfo, goal)
tween.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween3:Play()
tween4:Play()
end
end)
tween3.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween:Play()
tween2:Play()
end
end)
tween5.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween6:Play()
tween8:Play()
end
end)
tween6.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween5:Play()
tween7:Play()
end
end)
tween9.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween10:Play()
tween12:Play()
end
end)
tween10.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
tween9:Play()
tween11:Play()
end
end)
rtween.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
rtween2:Play()
end
end)
rtween2.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
rtween:Play()
rtween2:Play()
end
end)
local lastt = "rt"
rtweenr.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
rtween2r:Play()
rtween2r2:Play()
end
end)
rtween2r.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then 
if lastt == "rt" then
rtween3r:Play()
rtween3r2:Play()
lastt = "lt"
elseif lastt == "lt" then
rtweenr:Play()
rtweenr2:Play()
lastt = "rt"
end
end
end)
rtween3r.Completed:Connect(function(state) 
if state == Enum.PlaybackState.Completed then
rtween2r:Play()
rtween2r2:Play()
end
end)
idle = false
function animate(what)
if what == "idle" then
if not idle then
idle = true
coroutine.wrap(function()
rtweenr:Cancel()
rtween2r:Cancel()
rtweenr2:Cancel()
rtween2r2:Cancel()
rtween3r2:Cancel()
rtween3r:Cancel()
for i = 1,2 do
lleg1.C0 = lleg1.C0:Lerp(CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(-10),math.rad(-9),0),0.5)
rleg1.C0 = rleg1.C0:Lerp(CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(-10),math.rad(9),0),0.5)
lleg2.C0 = lleg2.C0:Lerp(CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(20),0,0),0.5)
rleg2.C0 = rleg2.C0:Lerp(CFrame.new(0,0.625,0) * CFrame.Angles(math.rad(20),0,0),0.5)
task.wait()
end
rtween:Play()
tween5:Play()
tween7:Play()
tween9:Play()
tween11:Play()
tween:Play()
tween2:Play()
end)()
end
else
if idle then
idle = false
rtween:Cancel()
tween5:Cancel()
tween7:Cancel()
tween9:Cancel()
tween11:Cancel()
tween:Cancel()
tween2:Cancel()
rtween2:Cancel()
tween6:Cancel()
tween8:Cancel()
tween10:Cancel()
tween12:Cancel()
tween3:Cancel()
tween4:Cancel()
rtweenr:Play()
rtweenr2:Play()
end
end
end
local noweld = Instance.new("Weld")
local IK_HANDLER = {}
IK_HANDLER.__index = IK_HANDLER
 
local Pi = math.pi -- We are using radian-based angles (rather than degree), so we use Pi! Pi radians = 180 degrees
local HalfPi = Pi/2 -- Pi/2 radians = 90 degrees.
local Tau = 2*Pi -- 2pi radians = 360 degrees. And yes, Tau is a word! Represented by symbol 't'
 
local ForwardVector = Vector3.new(0,0,-1) -- Get a forward-directional Vector3
local YAxisExclusion = Vector3.new(1,0,1) -- This will be used later; Vector3*YAxisExclusion will remove the middle value, or the y-value.
 
local RightHipCFrame = rleg1.C1 -- The self.RightRotationAngle-hip reference CFrame, relative to the RightUpperLeg position
local LeftHipCFrame = lleg1.C1 -- The self.LeftRotationAngle-hip reference CFrame, relative to the LeftUpperLeg position
local RightHipCFrame2 = (rleg1.C1 * CFrame.new(0,-1.7,0))
local LeftHipCFrame2 = (lleg1.C1 * CFrame.new(0,-1.7,0))
 
local RightIdleCFrame = rleg1.C1 * CFrame.new(0.15,0.25,-0.125) -- Idle CFrame of Motor6D joint
local LeftIdleCFrame = lleg1.C1 * CFrame.new(-0.15,0.25,-0.125) -- Idle CFrame of Motor6D joint
 
 
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--||	
--**--**--**--**--**--||	PRIVATE FUNCTIONS
--**--**--**--**--**--||	
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
 
local function SolveLegIK(o,t,l0,l1) -- Does the major math calculations for IK
	-- Make the position local relative to the origin
	local l = o:pointToObjectSpace(t) -- World space to local space
	local lu = l.Unit -- Get normalized unit for future math
 
	local m = l.Magnitude -- Get the length from the position to the target
 
	-- Make a CFrame pointing from the shoulder position directing to the second position
	local x = ForwardVector:Cross(-lu) -- Cross the forward vector with the negative of the normalized unit
	local g = math.acos(-lu.Z) -- Get the arc-cosine of the negative normalized unit
	local p = o*CFrame.fromAxisAngle(x,g):Inverse() -- Get the IK plane
 
	-- In a self.RightRotationAngle-triangle, we have the hypotenuse and the two shorter legs.
	-- In a self.RightRotationAngle triangle, the hypotenuse is side "c," and the legs are a and b.
	-- This information will be helpful later on.
 
	if m < math.max(l1,l0)-math.min(l1,l0) then
		-- If c is between the lengths of a and b then return an offsetted plane so that one of the lengths reaches the goal,
		-- but the other length is folded so it looks natural
		-- This cacluation is done when a position comes before the end of the leg, and may look a bit... odd
 
		return p*CFrame.new(0,0,math.max(l1,l0)-math.min(l1,l0)-m),-HalfPi,Pi
	elseif m > l0+l1 then
		-- If c > a + b then return flat angles and an offsetted plane which reaches its target
		-- Basically, this makes the leg flat if there is nothing to place it on
 
		return p,HalfPi,0
	else
		-- Otherwise, use the law of cosines
		-- This is going to be all cases where the leg actually bends
 
		local a1 = -math.acos((-(l1*l1)+(l0*l0)+(m*m))/(2*l0*m))
		local a2 = math.acos(((l1*l1)-(l0*l0)+(m*m))/(2*l1*m))
		return p,HalfPi-a1,-(a2-a1)
	end
end
 
local function lerpNumber(a,b,t)return (a+(b-a)*t)end  -- Get a number between a and b, given the alpha (t, which can be a number anywhere between 0-1).
 
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--||	
--**--**--**--**--**--||	CLASS CONSTRUCTOR, VARIABLES, AND METHODS
--**--**--**--**--**--||	
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
local RaycastParameters = RaycastParams.new()
RaycastParameters.IgnoreWater = true
RaycastParameters.FilterType = Enum.RaycastFilterType.Blacklist
 
local ParamBlacklist = {}
 
IK_HANDLER.ActiveInstances = {}
 
function IK_HANDLER.New(Player, Stride, CycleSpeed, MaxRenderDistance, RaycastOffset)
	local Character = Player
 
	if not Player then
		error("Attempted to pass player, got nil")
	elseif not Character then
		error("Attempted to get Character from " .. Player .. ", got nil")
	end
 
	local Stride = Stride or 2.6
	local CycleSpeed = CycleSpeed or 10
	local MaxRenderDistance = MaxRenderDistance or 150
	local RaycastOffset = RaycastOffset or 0.3
	local self = {}
 
	self.Character = Character
	self.Humanoid = self.Character.Humanoid
	self.HumanoidRootPart = rootp
	self.TargetBaseBart	= part
	self.WaistJoint = weld
	self.RootJoint = rootweld
	self.WaistCFrame1 = weld.C1
	self.RightHip = rleg1
	self.RightKnee = rleg2
	self.LeftHip = lleg1
	self.LeftKnee = lleg2
	self.RightHipCFrame0 = rleg1.C0
	self.RightKneeCFrame0 = rleg2.C0
	self.LeftHipCFrame0 = lleg1.C0
	self.LeftKneeCFrame0 = lleg2.C0
	self.LeftRotationAngle = 0
	self.RightRotationAngle	= Pi
	self.Direction = YAxisExclusion -- This will be changed
	self.CycleSpeed = CycleSpeed -- How fast the leg-movement cycle is. Change this to suit your needs!
	self.StrideCFrame = CFrame.new(0,0,Stride/2) -- Turn the Stride number into a CFrame we can use for animation
	self.PreviousTick = tick()
	self.Enabled = true
	self.MaxRenderDistance = MaxRenderDistance
	self.RaycastOffset = RaycastOffset
 
	IK_HANDLER.ActiveInstances[self] = true
 
	IK_HANDLER.UpdateRaycastBlacklist()
 
	return setmetatable(self, IK_HANDLER) -- We have made an I N S T A N C E (*laughs in programming*)
end
 
function IK_HANDLER.UpdateRaycastBlacklist(Blacklist)
	if Blacklist then
		ParamBlacklist = Blacklist
	end
 
	local Mod = {}
	for self,_ in pairs(IK_HANDLER.ActiveInstances) do
		if self.Character then
			table.insert(Mod, self.Character)
		end
	end
 
	RaycastParameters.FilterDescendantsInstances = {unpack(Mod),unpack(ParamBlacklist)}
end
 
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--||	
--**--**--**--**--**--||	INSTANCE METHODS
--**--**--**--**--**--||	
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--
 
function IK_HANDLER:IsActive()
	if not IK_HANDLER.ActiveInstances[self] then
		return false
	end
 
	if not self.Character or not self.Character.Parent then
		IK_HANDLER.ActiveInstances[self] = nil
		IK_HANDLER.UpdateRaycastBlacklist()
		return false
	end
 
	return true
end
 
function IK_HANDLER:Destroy()
	if IK_HANDLER.ActiveInstances[self] then
		IK_HANDLER.ActiveInstances[self] = nil
	end
 
	for Index, _ in pairs(self) do
		self[Index] = nil
	end
 
	self = nil
 
	IK_HANDLER.UpdateRaycastBlacklist()
end
 
function IK_HANDLER:Enable()
	self.Enabled = true
end
 
function IK_HANDLER:Disable()
	self.Enabled = false
end
 
function IK_HANDLER:Update()
pcall(function()
	if not self.Enabled then
		return
	end
 
	if not self.Character or not self.Character.Parent then
		IK_HANDLER.ActiveInstances[self] = nil
		IK_HANDLER.UpdateRaycastBlacklist()
		return
	end
 
	local CurrentTick = tick()
	local Delta = math.clamp(CurrentTick - self.PreviousTick,0.00001,0.5)
	local Delta10 = math.min(Delta*10,1) -- Modify Delta for our needs
 
	local lowercf = self.TargetBaseBart.CFrame -- Our position
	local rootcf = self.HumanoidRootPart.CFrame -- Another position
	local rootvel0 = self.HumanoidRootPart.Velocity -- Our movement velocity
	local rootvel,rootvelm
	local climbing	= self.Humanoid:GetState() == Enum.HumanoidStateType.Climbing -- Are we climbing?
 
	local RootPosition = rootcf.Position
 
 
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
 
	self.PreviousTick = CurrentTick
 
	if climbing then -- Don't animate if we are climbing, it looks weird
		rootvel = rootvel0
		rootvelm = rootvel.Magnitude
		self.Direction = rootcf.lookVector
	else
		rootvel		=rootvel0*YAxisExclusion
		rootvelm	=rootvel.Magnitude
		if rootvelm > 0.1 then
			self.Direction = self.Direction:Lerp(rootvel.Unit, Delta10)
		end
	end
 
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
 
	local up =rootvelm/18
	local cycle =up * Delta * self.CycleSpeed
 
	self.RightRotationAngle = (self.RightRotationAngle+cycle)%Tau
	self.LeftRotationAngle = (self.LeftRotationAngle+cycle)%Tau
 
	-- By using modulus and Tau (Tau is a full circle roation), we keep rotations within our imaginary circle. Without this we get really weird joint movement.
 
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
	--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--==--
 
	if rootvelm > 0.1 then --// When moving
		local relv0 = lowercf:vectorToObjectSpace(rootvel)-- Object space is nice yes?
		local relv1 = relv0*0.2
		local relvx = relv0.X/rootvel.Magnitude
 
		self.WaistJoint.C1 = self.WaistJoint.C1:Lerp(self.WaistCFrame1*CFrame.Angles(math.rad(relv1.Z),0.1*math.cos(self.RightRotationAngle)-2*math.rad(relv1.X),math.rad(-relv1.X)):Inverse(),Delta10) -- Upper Torso Anim
 
		local hpmod = HalfPi/20
		local kneeRot = -2
		local hipAlpha = Delta10*1.5
		local kneeAlpha = Delta10*1.5
 
		do -- Right Leg
			local hip = (rootcf*RightHipCFrame).Position
			local ground = (rootcf*RightHipCFrame2).Position
			local desiredPos = (CFrame.new(ground, ground+self.Direction)*CFrame.Angles(self.RightRotationAngle, 0, 0)*self.StrideCFrame*CFrame.new(-0.1,0,0)).Position
			local offset = (desiredPos-hip)
			local raycastResult = workspace:Raycast(hip,offset.Unit*(offset.magnitude+0.6),RaycastParameters)
			local footPos = raycastResult and raycastResult.Position or (hip + offset.Unit*(offset.magnitude+self.RaycastOffset))
 
			local plane,th1,th2 = SolveLegIK(lowercf*self.RightHipCFrame0,footPos, 1.4,3) -- 0.55,1.15
			self.RightHip.C0 = self.RightHip.C0:Lerp(lowercf:toObjectSpace(plane)*CFrame.Angles(-th1 + math.rad(180),hpmod,0),hipAlpha)
			self.RightKnee.C0 = self.RightKnee.C0:Lerp(self.RightKneeCFrame0*CFrame.Angles(th2*kneeRot,0,0),kneeAlpha)
		end
 
		do-- Left Leg
			local hip = (rootcf*LeftHipCFrame).Position
			local ground =(rootcf*LeftHipCFrame2).Position
			local desiredPos = (CFrame.new(ground, ground+self.Direction)*CFrame.Angles(self.LeftRotationAngle, 0, 0)*self.StrideCFrame*CFrame.new(0.1,0,0)).Position
			local offset = (desiredPos-hip)
			local raycastResult = workspace:Raycast(hip,offset.Unit*(offset.magnitude+0.6),RaycastParameters)
			local footPos = raycastResult and raycastResult.Position or (hip + offset.Unit*(offset.magnitude+self.RaycastOffset))
 
			local plane,th1,th2 = SolveLegIK(lowercf*self.LeftHipCFrame0,footPos, 1.4,3)
			self.LeftHip.C0 = self.LeftHip.C0:Lerp(lowercf:toObjectSpace(plane)*CFrame.Angles(-th1 + math.rad(180),hpmod,0),hipAlpha)
			self.LeftKnee.C0 = self.LeftKnee.C0:Lerp(self.LeftKneeCFrame0*CFrame.Angles(th2*kneeRot,0,0),kneeAlpha)
		end
	else --// When not moving
		-- Upper Torso
		self.WaistJoint.C1	=self.WaistJoint.C1:Lerp(self.WaistCFrame1, Delta10)
 
		local lowercf = lowercf
 
		do -- Right Leg
			local hipcf=(rootcf*RightHipCFrame)
			local hip =hipcf.Position
			local desiredPos =(hipcf*RightIdleCFrame).Position
			local offset =(desiredPos-hip)
			local raycastResult = workspace:Raycast(hip,offset.Unit*(offset.magnitude+1),RaycastParameters)
			local footPos = raycastResult and raycastResult.Position or (hip + offset.Unit*(offset.magnitude+self.RaycastOffset))
 
			local plane,th1,th2 = SolveLegIK(lowercf*self.RightHipCFrame0,footPos, 0.55,2)
			self.RightHip.C0 = self.RightHip.C0:Lerp(lowercf:toObjectSpace(plane)*CFrame.Angles(th1,0,-HalfPi/8),Delta10)
			self.RightKnee.C0 = self.RightKnee.C0:Lerp(self.RightKneeCFrame0*CFrame.Angles(th2,0,0),Delta10)
		end
 
		do -- Left Leg
			local hipcf = (rootcf*LeftHipCFrame)
			local hip = hipcf.Position
			local desiredPos = (hipcf*LeftIdleCFrame).Position
			local offset = (desiredPos-hip)
			local raycastResult = workspace:Raycast(hip,offset.Unit*(offset.magnitude+1),RaycastParameters)
			local footPos = raycastResult and raycastResult.Position or (hip + offset.Unit*(offset.magnitude+self.RaycastOffset))
 
			local plane,th1,th2 = SolveLegIK(lowercf*self.LeftHipCFrame0,footPos, 0.55,2)
			self.LeftHip.C0 = self.LeftHip.C0:Lerp(lowercf:toObjectSpace(plane)*CFrame.Angles(th1,0,HalfPi/8),Delta10)
			self.LeftKnee.C0 = self.LeftKnee.C0:Lerp(self.LeftKneeCFrame0*CFrame.Angles(th2,0,0),Delta10)
		end
	end
end)
end
local IKProfile = IK_HANDLER.New(char,2.85,10,0,0.5)
wait()
coroutine.wrap(function()
while task.wait() do
if IKProfile:IsActive() then
			IKProfile:Update()
end
end
end)()
local dead = false
hum.HealthChanged:Connect(function(health)
if health == 0 and not dead then
dead = true
part4.CanCollide = true
part5.CanCollide = true
part6.CanCollide = true
part7.CanCollide = true
    for i,v in pairs(char:GetDescendants()) do
        if v:IsA("Weld") then
            local Socket = Instance.new("BallSocketConstraint")
            local a1 = Instance.new("Attachment")
            local a2 = Instance.new("Attachment")
            a1.Parent = v.Part0
            a2.Parent = v.Part1
            Socket.Parent = v.Parent
            Socket.Attachment0 = a1
            Socket.Attachment1 = a2
            a1.CFrame = v.C0
            a2.CFrame = v.C1
            Socket.LimitsEnabled = true
            Socket.TwistLimitsEnabled = true
            v:Destroy()
    end
end
for i,v in pairs(char:GetDescendants()) do
if v:IsA("Part") then
    local bone = Instance.new("Part", v)
    bone:BreakJoints()
    local bonew = Instance.new("Weld", bone)
    bonew.Part0 = v
    bonew.Part1 = bone
    bonew.C0 = CFrame.fromEulerAnglesXYZ(0,0,math.pi/2) * CFrame.new(-v.Size.y/4.5,0,0)
        bone.Size = Vector3.new(v.Size.y/3,v.Size.z,v.Size.x)
    bone.Transparency = 1
    bone.Shape = "Cylinder"
end
end
end
end)
rootp.Anchored = false
while wait() do
if rootp.Velocity.Magnitude > 0.1 then
if idle then
IKProfile:Enable()
end
animate("s")
else
if not idle then
IKProfile:Disable()
end
animate("idle")
end
end
end)()
end
end)
